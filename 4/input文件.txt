(1) 簡介：
任務一：使用者輸入指令1後，讀入依學校代碼遞增排序的資料檔，每筆資料只擷取7個欄位：學校名稱、科系名稱、日間 /進修別、等級別、學生數、教師數、上學年度畢業生數。再將每筆資料次序存入動態陣列。接著以上學年度畢業生數、學校名稱為鍵值分別建立二元搜尋樹，分別計算他們的樹高，並顯示於螢幕上。

任務二：若是使用者輸入指令2，便讀入一個非負整數，要是輸入的不是非負整數，就輸出對應的提示，若為非負整數，便在上學年度畢業生數的二元搜尋樹中，利用遞迴找出鍵值不低於該整數的所有資料，找到一個就將其idx 加入存放所有符合條件條件的動態陣列中，最後透過idx對照allR中的資料，逐一顯示符合條件的資料於螢幕上，若沒有符合資料，就輸出There is no match!。
若使用者輸入指令3，就讀入一個名稱字串，在學校名稱的二元搜尋樹找出完全相同的所有資料，將其idx 加入存放所有符合條件的動態陣列中，找完之後，透過idx對照allR中的對應資料，逐一顯示符合條件的資料於螢幕上，沒有符合的資料，就輸出There is no match!。
若是使用者在輸入指令2或3前沒有輸過指令1，便提示使用者先輸入指令1。

困難：我在寫遞迴這方面比較弱，建立二元搜尋樹時不知道如何下手，搜尋符合條件的資料時也在想遞迴條件是什麼，還有解構樹也常常crash。

解決方法：與另一位組員討論如何建立二元搜尋樹，並且自己畫出二元搜尋樹，跑一遍流程，理解之後就比較順利了。解構樹也是先理解刪除節點的概念之後，重新想一遍流程，就沒有再crash或 memory leak。

(2) 圖示：
 

(3) 解說影片：https://youtu.be/p_ZNUiXZXrc
